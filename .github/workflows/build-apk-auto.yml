name: 🚀 BidWar APK Auto Build

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type (debug/release)'
        required: false
        default: 'release'
        type: choice
        options:
        - debug
        - release

jobs:
  build-apk:
    name: 📱 Build APK
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: ☕ Setup Java 17
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'
        
    - name: 📱 Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.3'
        channel: 'stable'
        cache: true
        
    - name: 🔧 Configure Flutter Cache
      run: |
        echo "🔧 Setting up Flutter cache directory..."
        mkdir -p $HOME/.flutter
        
        # Set Flutter root if needed
        if [ -f "$RUNNER_TOOL_CACHE/flutter/stable-3.24.3-x64/flutter" ]; then
          export FLUTTER_ROOT="$RUNNER_TOOL_CACHE/flutter/stable-3.24.3-x64/flutter"
          export PATH="$FLUTTER_ROOT/bin:$PATH"
        fi
        
        echo "✅ Flutter cache configured"
        
    - name: 🔧 Flutter Configuration
      run: |
        echo "🔧 Configuring Flutter..."
        flutter config --no-analytics
        flutter precache
        echo "✅ Flutter configured"
        
    - name: 🔧 Setup Android SDK
      uses: android-actions/setup-android@v3
      with:
        cmdline-tools-version: '11.0'
        accept-android-sdk-licenses: true
        packages: |
          platform-tools
          platforms;android-34
          build-tools;34.0.0
        
    - name: 📋 Flutter Doctor
      run: flutter doctor -v
      
    - name: 🔐 Accept Android Licenses
      run: yes | flutter doctor --android-licenses
      
    - name: 🔧 Create Environment File
      run: |
        cat > env.json << 'EOF'
        {
          "SUPABASE_URL": "${{ secrets.SUPABASE_URL || 'https://lelkttetaguswijpdnsb.supabase.co' }}",
          "SUPABASE_ANON_KEY": "${{ secrets.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxlbGt0dGV0YWd1c3dpanBkbnNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyMzA2OTgsImV4cCI6MjA3MTgwNjY5OH0.wS2ko7O7glbg0Ekw-QHY9WB7HkFOGwohlO_Zwr8ByLw' }}",
          "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY || 'your-openai-api-key-here' }}",
          "GEMINI_API_KEY": "${{ secrets.GEMINI_API_KEY || 'your-gemini-api-key-here' }}",
          "ANTHROPIC_API_KEY": "${{ secrets.ANTHROPIC_API_KEY || 'your-anthropic-api-key-here' }}",
          "PERPLEXITY_API_KEY": "${{ secrets.PERPLEXITY_API_KEY || 'your-perplexity-api-key-here' }}"
        }
        EOF
        
    - name: 🔧 Fix Code Issues
      run: |
        echo "🔧 Fixing Theme compatibility issues..."
        sed -i 's/CardTheme(/CardThemeData(/g' lib/theme/app_theme.dart || true
        sed -i 's/TabBarTheme(/TabBarThemeData(/g' lib/theme/app_theme.dart || true
        
        echo "🔧 Fixing Routing issues..."
        sed -i 's/AppRoutes\.initial/AppRoutes.home/g' lib/widgets/custom_error_widget.dart || true
        
        echo "🔧 Setting Gradle permissions..."
        chmod +x android/gradlew || true
        
        echo "✅ Code fixes applied"
        
    - name: 📦 Get Dependencies
      run: |
        echo "🧹 Cleaning previous dependency resolution..."
        rm -f pubspec.lock
        
        echo "📦 Getting Flutter dependencies..."
        flutter pub get
        
        echo "🔍 Checking for dependency conflicts..."
        flutter pub deps || true
        
        echo "📋 Checking outdated packages..."
        flutter pub outdated || true
      
    - name: 🔍 Analyze Code
      run: flutter analyze --no-fatal-infos || true
      
    - name: 🧪 Run Tests
      run: flutter test || true
      
    - name: 🏗️ Build APK
      run: |
        BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
        echo "🏗️ Building $BUILD_TYPE APK..."
        
        # Ensure we can write to the build directory
        mkdir -p build/app/outputs/flutter-apk
        
        # Build APK with comprehensive error handling
        if flutter build apk \
          --$BUILD_TYPE \
          --dart-define-from-file=env.json \
          --android-skip-build-dependency-validation \
          --no-tree-shake-icons \
          --target-platform android-arm,android-arm64,android-x64; then
          echo "✅ APK build completed successfully"
        else
          echo "❌ APK build failed. Checking for partial build..."
          
          # Show flutter doctor for debugging
          echo "📋 Flutter Doctor Output:"
          flutter doctor -v || true
          
          # List any APK files that might have been created
          echo "🔍 Searching for any APK files..."
          find . -name "*.apk" -type f 2>/dev/null || echo "No APK files found"
          
          # Show build directory structure
          echo "📁 Build directory structure:"
          ls -la build/ || echo "Build directory not found"
          ls -la build/app/ || echo "Build app directory not found"
          ls -la build/app/outputs/ || echo "Build outputs directory not found"
          
          exit 1
        fi
          
    - name: 📋 APK Info
      run: |
        BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
        APK_PATH="build/app/outputs/flutter-apk/app-$BUILD_TYPE.apk"
        
        echo "🔍 Looking for APK file at: $APK_PATH"
        
        if [ -f "$APK_PATH" ]; then
          APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
          echo "✅ APK created successfully!"
          echo "📱 APK Path: $APK_PATH"
          echo "📏 APK Size: $APK_SIZE"
          
          # Verify APK is not corrupted
          if [ -s "$APK_PATH" ]; then
            echo "✅ APK file is not empty"
          else
            echo "⚠️ APK file exists but is empty"
            exit 1
          fi
          
          # Create build info
          cat > build_info.txt << EOF
        BidWar APK Build Information
        ============================
        Build Type: $BUILD_TYPE
        Build Date: $(date)
        APK Size: $APK_SIZE
        APK Path: $APK_PATH
        Commit SHA: ${{ github.sha }}
        Branch: ${{ github.ref_name }}
        Workflow: ${{ github.workflow }}
        Run Number: ${{ github.run_number }}
        
        Build Environment:
        - Flutter Version: $(flutter --version | head -n 1)
        - Java Version: $JAVA_HOME
        - Android SDK: $ANDROID_HOME
        EOF
          
          echo "📋 Build info created"
        else
          echo "❌ APK file not found at: $APK_PATH"
          echo "🔍 Searching for any APK files..."
          find build -name "*.apk" -type f 2>/dev/null | head -10 || echo "No APK files found anywhere"
          
          echo "📁 Build outputs directory contents:"
          ls -la build/app/outputs/ || echo "Build outputs directory not found"
          ls -la build/app/outputs/flutter-apk/ || echo "Flutter APK directory not found"
          
          exit 1
        fi
        
    - name: 📤 Upload APK Artifact
      uses: actions/upload-artifact@v4
      if: success()
      with:
        name: bidwar-apk-${{ github.event.inputs.build_type || 'release' }}-${{ github.run_number }}
        path: |
          build/app/outputs/flutter-apk/*.apk
          build_info.txt
        retention-days: 30
        if-no-files-found: error
        
    - name: 📤 Upload Build Logs (if build fails)
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: build-logs-${{ github.run_number }}
        path: |
          build_info.txt
          flutter_*.log
        retention-days: 7
        if-no-files-found: ignore
        
    - name: 📊 Build Summary
      run: |
        BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
        APK_PATH="build/app/outputs/flutter-apk/app-$BUILD_TYPE.apk"
        APK_SIZE=$(du -h "$APK_PATH" | cut -f1)
        
        echo "## 🎉 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "| Property | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Build Type | $BUILD_TYPE |" >> $GITHUB_STEP_SUMMARY
        echo "| APK Size | $APK_SIZE |" >> $GITHUB_STEP_SUMMARY
        echo "| Commit | ${{ github.sha }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Branch | ${{ github.ref_name }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Run Number | ${{ github.run_number }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "✅ APK built successfully and uploaded as artifact!" >> $GITHUB_STEP_SUMMARY

  # Optional: Create Release on Tag Push
  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    needs: build-apk
    if: startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 📥 Download APK Artifact
      uses: actions/download-artifact@v4
      with:
        name: bidwar-apk-release-${{ github.run_number }}
        path: ./artifacts
        
    - name: 🚀 Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/*.apk
          ./artifacts/build_info.txt
        name: BidWar ${{ github.ref_name }}
        body: |
          ## 🎉 BidWar Release ${{ github.ref_name }}
          
          ### 📱 APK Information
          - **Build Date**: ${{ steps.date.outputs.date }}
          - **Commit**: ${{ github.sha }}
          - **Branch**: ${{ github.ref_name }}
          
          ### 📥 Download
          Download the APK file from the assets below.
          
          ### 🔧 Installation
          1. Enable "Unknown Sources" in Android settings
          2. Download and install the APK file
          3. Launch BidWar app
          
          ---
          *Built automatically with GitHub Actions*
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

