name: Build APK

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      build_type:
        description: 'Build type'
        required: true
        default: 'release'
        type: choice
        options:
        - debug
        - release

jobs:
  build:
    name: Build APK
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: '17'
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.5'
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Create env.json for CI
      run: |
        cat > env.json << EOF
        {
          "SUPABASE_URL": "${{ secrets.SUPABASE_URL || 'https://lelkttetaguswijpdnsb.supabase.co' }}",
          "SUPABASE_ANON_KEY": "${{ secrets.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxlbGt0dGV0YWd1c3dpanBkbnNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyMzA2OTgsImV4cCI6MjA3MTgwNjY5OH0.wS2ko7O7glbg0Ekw-QHY9WB7HkFOGwohlO_Zwr8ByLw' }}",
          "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY || 'your-openai-api-key-here' }}",
          "GEMINI_API_KEY": "${{ secrets.GEMINI_API_KEY || 'your-gemini-api-key-here' }}",
          "ANTHROPIC_API_KEY": "${{ secrets.ANTHROPIC_API_KEY || 'your-anthropic-api-key-here' }}",
          "PERPLEXITY_API_KEY": "${{ secrets.PERPLEXITY_API_KEY || 'your-perplexity-api-key-here' }}"
        }
        EOF
        
    - name: Analyze project
      run: flutter analyze --no-fatal-infos
      
    - name: Run tests
      run: flutter test
      continue-on-error: true
      
    - name: Build APK (Debug)
      if: ${{ github.event.inputs.build_type == 'debug' || github.event.inputs.build_type == '' }}
      run: flutter build apk --debug --dart-define-from-file=env.json
      
    - name: Build APK (Release)
      if: ${{ github.event.inputs.build_type == 'release' || github.event.inputs.build_type == '' }}
      run: flutter build apk --release --dart-define-from-file=env.json
      
    - name: Get build info
      id: build_info
      run: |
        echo "date=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_OUTPUT
        echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "branch_name=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
        
    - name: Rename APK with build info
      run: |
        BUILD_TYPE="${{ github.event.inputs.build_type || 'release' }}"
        APK_PATH="build/app/outputs/flutter-apk/app-${BUILD_TYPE}.apk"
        NEW_NAME="bidwar-${BUILD_TYPE}-${{ steps.build_info.outputs.date }}-${{ steps.build_info.outputs.commit_sha }}.apk"
        
        if [ -f "$APK_PATH" ]; then
          mv "$APK_PATH" "build/app/outputs/flutter-apk/$NEW_NAME"
          echo "APK renamed to: $NEW_NAME"
          echo "APK_NAME=$NEW_NAME" >> $GITHUB_ENV
        else
          echo "APK file not found at: $APK_PATH"
          ls -la build/app/outputs/flutter-apk/
          exit 1
        fi
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: bidwar-apk-${{ steps.build_info.outputs.date }}-${{ steps.build_info.outputs.commit_sha }}
        path: build/app/outputs/flutter-apk/${{ env.APK_NAME }}
        retention-days: 30
        
    - name: Upload build logs
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: build-logs-${{ steps.build_info.outputs.date }}
        path: |
          build/app/outputs/logs/
          flutter_build.log
        retention-days: 7
        if-no-files-found: ignore
        
    - name: Comment on PR with APK download
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { context } = require('@actions/github');
          const buildType = '${{ github.event.inputs.build_type || 'release' }}';
          const apkName = '${{ env.APK_NAME }}';
          const artifactName = 'bidwar-apk-${{ steps.build_info.outputs.date }}-${{ steps.build_info.outputs.commit_sha }}';
          
          const comment = `## ðŸ“± APK Build Complete
          
          **Build Type:** \`${buildType}\`
          **APK Name:** \`${apkName}\`
          **Commit:** \`${{ steps.build_info.outputs.commit_sha }}\`
          **Build Date:** \`${{ steps.build_info.outputs.date }}\`
          
          âœ… APK has been successfully built and is available as an artifact named \`${artifactName}\`.
          
          To download the APK:
          1. Go to the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
          2. Scroll down to the "Artifacts" section
          3. Click on \`${artifactName}\` to download
          
          **Note:** APK artifacts are retained for 30 days.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });