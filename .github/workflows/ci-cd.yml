name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run nightly builds at 2 AM UTC
    - cron: '0 2 * * *'

env:
  FLUTTER_VERSION: '3.24.5'
  JAVA_VERSION: '17'

jobs:
  analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Verify dependencies
      run: flutter pub deps
      
    - name: Analyze code
      run: flutter analyze
      
    - name: Check formatting
      run: dart format --set-exit-if-changed .
      continue-on-error: true
      
    - name: Check for unused code
      run: |
        dart pub global activate dart_code_metrics
        dart pub global run dart_code_metrics:metrics analyze lib
      continue-on-error: true

  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: analysis
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Run tests with coverage
      run: flutter test --coverage
      
    - name: Upload coverage to Codecov
      if: github.event_name == 'push'
      uses: codecov/codecov-action@v4
      with:
        file: coverage/lcov.info
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: false

  build_apk:
    name: Build APK
    runs-on: ubuntu-latest
    needs: [analysis, test]
    strategy:
      matrix:
        build_type: [debug, release]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}
        
    - name: Setup Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true
        
    - name: Get dependencies
      run: flutter pub get
      
    - name: Create env.json for CI
      run: |
        cat > env.json << EOF
        {
          "SUPABASE_URL": "${{ secrets.SUPABASE_URL || 'https://lelkttetaguswijpdnsb.supabase.co' }}",
          "SUPABASE_ANON_KEY": "${{ secrets.SUPABASE_ANON_KEY || 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImxlbGt0dGV0YWd1c3dpanBkbnNiIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTYyMzA2OTgsImV4cCI6MjA3MTgwNjY5OH0.wS2ko7O7glbg0Ekw-QHY9WB7HkFOGwohlO_Zwr8ByLw' }}",
          "OPENAI_API_KEY": "${{ secrets.OPENAI_API_KEY || 'your-openai-api-key-here' }}",
          "GEMINI_API_KEY": "${{ secrets.GEMINI_API_KEY || 'your-gemini-api-key-here' }}",
          "ANTHROPIC_API_KEY": "${{ secrets.ANTHROPIC_API_KEY || 'your-anthropic-api-key-here' }}",
          "PERPLEXITY_API_KEY": "${{ secrets.PERPLEXITY_API_KEY || 'your-perplexity-api-key-here' }}"
        }
        EOF
        
    - name: Build APK
      run: flutter build apk --${{ matrix.build_type }} --dart-define-from-file=env.json --verbose
      
    - name: Get build info
      id: build_info
      run: |
        echo "date=$(date +'%Y%m%d_%H%M%S')" >> $GITHUB_OUTPUT
        echo "commit_sha=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
        echo "build_number=$(date +'%Y%m%d%H')" >> $GITHUB_OUTPUT
        
    - name: Rename and organize APK
      run: |
        BUILD_TYPE="${{ matrix.build_type }}"
        APK_PATH="build/app/outputs/flutter-apk/app-${BUILD_TYPE}.apk"
        NEW_NAME="bidwar-${BUILD_TYPE}-v1.0.0+${{ steps.build_info.outputs.build_number }}-${{ steps.build_info.outputs.commit_sha }}.apk"
        
        mkdir -p artifacts
        
        if [ -f "$APK_PATH" ]; then
          cp "$APK_PATH" "artifacts/$NEW_NAME"
          echo "APK created: $NEW_NAME"
          echo "APK_NAME=$NEW_NAME" >> $GITHUB_ENV
          
          # Get APK info
          APK_SIZE=$(du -h "artifacts/$NEW_NAME" | cut -f1)
          echo "APK_SIZE=$APK_SIZE" >> $GITHUB_ENV
          echo "APK size: $APK_SIZE"
        else
          echo "❌ APK file not found at: $APK_PATH"
          echo "Available files:"
          find build -name "*.apk" -type f || echo "No APK files found"
          exit 1
        fi
        
    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: bidwar-${{ matrix.build_type }}-apk-${{ steps.build_info.outputs.date }}
        path: artifacts/${{ env.APK_NAME }}
        retention-days: 30
        
    - name: Create release info
      if: matrix.build_type == 'release' && github.ref == 'refs/heads/main'
      run: |
        cat > release_notes.md << EOF
        ## 📱 BidWar APK Release
        
        **Version:** 1.0.0+${{ steps.build_info.outputs.build_number }}  
        **Build Date:** $(date +'%Y-%m-%d %H:%M:%S UTC')  
        **Commit:** ${{ steps.build_info.outputs.commit_sha }}  
        **APK Size:** ${{ env.APK_SIZE }}  
        **Build Type:** Release
        
        ### Download
        The APK is available as an artifact in this workflow run.
        
        ### Installation
        1. Download the APK file
        2. Enable "Install from Unknown Sources" in Android settings
        3. Install the APK file
        
        ### Changes
        - Latest code from main branch
        - All environment configurations included
        - Optimized release build
        EOF
        
    - name: Upload release notes
      if: matrix.build_type == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: release-notes-${{ steps.build_info.outputs.date }}
        path: release_notes.md
        retention-days: 90

  build_summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [build_apk]
    if: always()
    
    steps:
    - name: Generate build summary
      run: |
        echo "## 🔨 Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Build Type | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Debug APK | ${{ needs.build_apk.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Release APK | ${{ needs.build_apk.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Workflow Run:** [${{ github.run_id }}](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY